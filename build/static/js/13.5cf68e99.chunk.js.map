{"version":3,"sources":["pages/Game/Lotto/index.js"],"names":["COLUNMS_LOTTO","COLUNMS_HISTORY_LOTTO_1","title","dataIndex","key","align","render","arr","map","__i","ind","className","isExacly","number","leg","COLUNMS_HISTORY_LOTTO_2","connect","state","lotto","history","result","orderItem","infoGame","loading","endRoundOfGame","roundofgame","InquireLotto","whitelistedTypeGames","whitelistedTypes","filter","typeGame","type","has","count","getResult","getDataHistory","onRemoveItemSelectd","onGetInfoGame","onBetGameOrder","onRandomNumberMinMax","onSentResultOptions","reLoadDataGame","getUserInfo","auth","getMyInquireLotto","isMobile","checkMobile","useParams","useEffect","then","onGetDataCh","a","payload","gameid","getGameIdNumber","Number","style","height","hiddenResult","columns","onGetDataChange","data","_pageSize"],"mappings":"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","file":"static/js/13.5cf68e99.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { checkMobile } from \"helper/helper\";\r\nimport { LayoutLottery } from \"components\";\r\nimport { BoxInfoAndResultOrder, BoxOrderPlayGame, MyLottrey } from \"moduls\";\r\nimport { getGameIdNumber } from \"helper/game\";\r\nimport { COLUNMS_HISTORY_LOTTO_2, COLUNMS_HISTORY_LOTTO_1 } from \"config/table\";\r\nimport \"./style.scss\";\r\n\r\nconst COLUNMS_LOTTO = [\r\n  COLUNMS_HISTORY_LOTTO_1[1],\r\n  COLUNMS_HISTORY_LOTTO_1[2],\r\n  {\r\n    title: \"번호\",\r\n    dataIndex: \"exacly\",\r\n    key: \"exacly\",\r\n    align: \"center\",\r\n    render: (arr) => (\r\n      <>\r\n        {(arr || []).map((__i, ind) => {\r\n          return (\r\n            <span key={`______key-exacly-${ind}`}>\r\n              <span className={__i?.isExacly ? \"bold\" : \"\"}>\r\n                {__i?.number || \"\"}\r\n              </span>\r\n              {__i?.leg == ind ? \"\" : `, `}\r\n            </span>\r\n          );\r\n        })}\r\n      </>\r\n    ),\r\n  },\r\n  ...COLUNMS_HISTORY_LOTTO_2,\r\n];\r\nconst GameLotto = ({\r\n  //state\r\n  result,\r\n  history,\r\n  orderItem,\r\n  infoGame,\r\n  loading,\r\n  endRoundOfGame,\r\n  roundofgame,\r\n\r\n  //func\r\n  getResult,\r\n  getDataHistory,\r\n  onRemoveItemSelectd,\r\n  onGetInfoGame,\r\n  onBetGameOrder,\r\n  onRandomNumberMinMax,\r\n  onSentResultOptions,\r\n  getUserInfo,\r\n  reLoadDataGame,\r\n  getMyInquireLotto,\r\n  InquireLotto,\r\n  count,\r\n}) => {\r\n  const isMobile = checkMobile();\r\n  const typeGame = useParams();\r\n  const type = \"LOTTO\";\r\n\r\n  const startUpdateInfoGame = () => {\r\n    onGetInfoGame({\r\n      typeGame: typeGame.type,\r\n      type: type,\r\n    }).then(() => {\r\n      // setTimeout(startUpdateInfoGame, 5000);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserInfo();\r\n  }, []);\r\n  useEffect(() => {\r\n    if (typeGame?.type) {\r\n      startUpdateInfoGame();\r\n    }\r\n  }, [typeGame]);\r\n\r\n  const onGetDataCh = async (payload = {}) => {\r\n    const gameid = getGameIdNumber({ typeGame: typeGame.type, type: type });\r\n    \r\n    await getMyInquireLotto({\r\n      ...payload,\r\n      gameid: gameid,\r\n    });\r\n  };\r\n  return (\r\n    <LayoutLottery>\r\n      <div className=\"container-cst mt-3 pb-5\">\r\n        <div className=\"page-game\">\r\n          {!isMobile && (\r\n            <BoxInfoAndResultOrder\r\n              result={result}\r\n              history={history}\r\n              getResult={getResult}\r\n              getDataHistory={getDataHistory}\r\n              type={type}\r\n              typeGame={Number(typeGame.type) || 5000}\r\n              reLoadDataGame={reLoadDataGame}\r\n              endRoundOfGame={endRoundOfGame}\r\n              roundofgame={roundofgame}\r\n            />\r\n          )}\r\n\r\n          <div style={{ height: 10 }} />\r\n\r\n          <BoxOrderPlayGame\r\n            orderItem={orderItem}\r\n            onRemoveItemSelectd={onRemoveItemSelectd}\r\n            typeGame={typeGame}\r\n            infoGame={infoGame}\r\n            onBetGameOrder={onBetGameOrder}\r\n            loading={loading}\r\n            onRandomNumberMinMax={onRandomNumberMinMax}\r\n            onSentResultOptions={onSentResultOptions}\r\n            result={result}\r\n            getResult={getResult}\r\n            isMobile={isMobile}\r\n            history={history}\r\n            type={type}\r\n            getDataHistory={getDataHistory}\r\n            reLoadDataGame={reLoadDataGame}\r\n            endRoundOfGame={endRoundOfGame}\r\n            roundofgame={roundofgame}\r\n          />\r\n\r\n          <MyLottrey\r\n            hiddenResult\r\n            columns={COLUNMS_LOTTO}\r\n            onGetDataChange={onGetDataCh}\r\n            data={InquireLotto}\r\n            count={count}\r\n            _pageSize={10}\r\n          />\r\n        </div>\r\n      </div>\r\n    </LayoutLottery>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => {\r\n    const { lotto, history } = state;\r\n\r\n    return {\r\n      result: lotto?.result || {},\r\n      history: lotto?.history || [],\r\n      orderItem: lotto?.orderItem || [],\r\n      infoGame: lotto?.infoGame || {},\r\n      loading: lotto?.loading,\r\n      endRoundOfGame: lotto?.endRoundOfGame,\r\n      roundofgame: lotto?.infoGame?.roundofgame || 0,\r\n\r\n      //history\r\n      InquireLotto:\r\n        (state.whitelistedTypeGames || state.whitelistedTypes\r\n          ? history?.InquireLotto.filter(\r\n              ({ typeGame, type }) =>\r\n                (state.whitelistedTypeGames?.has(typeGame) ?? true) &&\r\n                (state.whitelistedTypes?.has(type) ?? true)\r\n            )\r\n          : history?.InquireLotto) || [],\r\n      count: history?.count || 0,\r\n    };\r\n  },\r\n  ({\r\n    lotto: {\r\n      getResult,\r\n      getDataHistory,\r\n      onRemoveItemSelectd,\r\n      onGetInfoGame,\r\n      onBetGameOrder,\r\n      onRandomNumberMinMax,\r\n      onSentResultOptions,\r\n      reLoadDataGame,\r\n    },\r\n    auth: { getUserInfo },\r\n    history: { getMyInquireLotto },\r\n  }) => {\r\n    return {\r\n      getResult,\r\n      getDataHistory,\r\n      onRemoveItemSelectd,\r\n      onGetInfoGame,\r\n      onBetGameOrder,\r\n      onRandomNumberMinMax,\r\n      onSentResultOptions,\r\n      getUserInfo,\r\n      reLoadDataGame,\r\n      getMyInquireLotto,\r\n    };\r\n  }\r\n)(GameLotto);\r\n"],"sourceRoot":""}